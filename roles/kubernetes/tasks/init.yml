- name: Check if already init
  stat:
    path: /etc/kubernetes/admin.conf
  register: __kubeadm_already_init

- name: Pull images
  command: "kubeadm config images pull"
  when: not __kubeadm_already_init.stat.exists
  changed_when: false

- name: Init cluster
  command: "kubeadm init --apiserver-advertise-address={{ ansible_eth1.ipv4.address }} --apiserver-cert-extra-sans={{ ansible_eth1.ipv4.address }},{{ kube_api_endpoint }},{{ kube_api_internal_endpoint }},127.0.0.1,localhost  --node-name={{ ansible_hostname }} --pod-network-cidr=10.200.0.0/16  --service-cidr=10.201.0.0/16 --control-plane-endpoint={{ kube_api_internal_endpoint | default(ansible_eth1.ipv4.address) }}"
  register: __init_output
  when: not __kubeadm_already_init.stat.exists

- name: Extract define join command and token
  set_fact:
    join_command: "{{ __init_output.stdout_lines | select('match', '^kubeadm join') | first }}"
    join_token: "{{ __init_output.stdout_lines | select('match', '^kubeadm join') | first | regex_replace('.*--token ([^ ]*).*', '\\1') }}"
  when: not __kubeadm_already_init.stat.exists

- name: Check if kubeconfig already exists
  stat:
    path: "/root/.kube"
  register: __kubeconfig_already_init

- name: Create .kube directory
  file:
    path: "/root/.kube"
    state: directory
    owner: root
    group: root
    mode: 0750
  when: not __kubeconfig_already_init.stat.exists

- name: Copy admin.conf to .kube/config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: "/root/.kube/config"
    remote_src: true
    mode: 777
  when: not __kubeconfig_already_init.stat.exists

- name: Check if master is initialized
  uri:
    url: "https://{{ kube_api_internal_endpoint }}:6443"
    validate_certs: no
    status_code: [403]
  register: result
  until: "result.status == 403"
  retries: 20
  delay: 5
  when: not __kubeconfig_already_init.stat.exists

- name: Copy flannel manifest
  copy:
    src: "flannel.yml"
    dest: "/tmp/flannel.yml"
  when: ansible_hostname == kubeadm_init_node
  delegate_to: "{{ kubeadm_init_node }}"

- name: Install CNI flannel
  shell: "kubectl apply -f /tmp/flannel.yml"
  when: ansible_hostname == kubeadm_init_node
  delegate_to: "{{ kubeadm_init_node }}"

- name: Copy local-storage manifest
  copy:
    src: "storage-class.yml"
    dest: "/tmp/local-storage.yml"
  when: ansible_hostname == kubeadm_init_node
  delegate_to: "{{ kubeadm_init_node }}"

- name: Install local-storage
  shell: "kubectl apply -f /tmp/local-storage.yml"
  when: ansible_hostname == kubeadm_init_node
  delegate_to: "{{ kubeadm_init_node }}"

- name: Install pre-requisites
  become: yes
  become_method: sudo
  yum:
    name: python3,python3-pyyaml,python3-jsonpatch,curl,tar,python3-pip
    state: present

- name: Install kubernetes module
  become: yes
  become_method: sudo
  pip:
    name: kubernetes

- name: check if monitoring namespace exists
  become: yes
  become_method: sudo
  kubernetes.core.k8s_info:
    kind: namespace
    name: monitoring
  register: __monitoring_namespace

- name: Create monitoring base resources
  when: __monitoring_namespace.resources | length == 0
  block:
  - name: Create monitoring namespace
    become: yes
    become_method: sudo
    kubernetes.core.k8s:
      definition:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: monitoring

  - name: download CRDs Prometheus
    get_url:
      url: ' https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.78.2/stripped-down-crds.yaml'
      dest: /tmp/crd-prom.yaml

  - name: install CRDs Prometheus
    shell: "kubectl create -f /tmp/crd-prom.yaml"


- name: set ansible kube config path in env vars
  shell: "export K8S_AUTH_KUBECONFIG=/root/.kube/config"

- name: persist in bashrc
  lineinfile:
    path: /home/admintranet/.bashrc
    line: "export K8S_AUTH_KUBECONFIG=/root/.kube/config"
    regexp: "^"
    insertafter: EOF

- name: Clean up
  when: ansible_hostname == kubeadm_init_node
  delegate_to: "{{ kubeadm_init_node }}"
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - /tmp/flannel.yml
    - /tmp/local-storage.yml
    - /tmp/crd-prom.yaml

